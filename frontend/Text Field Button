<div class="div" data-el="div-1">
  <div class="div-2" data-el="div-2">
    <template data-el="div-3">
      <!-- state.stateInput === 'Default' ? 'Username:<br/>' : state.stateInput === 'Filling with cursor' ? 'Username:<br/>' : state.stateInput === 'Filled State' ? 'Username:<br/>' : state.stateInput === 'State5' ? 'Username:<br/>' : undefined -->
    </template>
  </div>
  <div class="div-3" data-el="div-4">
    <div class="div-4" data-el="div-5">
      <template data-el="div-6">
        <!-- state.stateInput === 'Default' ? 'Enter Input' : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'Enter Input' -->
      </template>
    </div>
    <div class="div-5" data-el="div-7">
      <template data-el="div-8">
        <!-- state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? '|' : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : undefined -->
      </template>
    </div>
    <div class="div-6" data-el="div-9">
      <template data-el="div-10">
        <!-- state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? 'Input Value' : state.stateInput === 'State5' ? undefined : undefined -->
      </template>
    </div>
  </div>
  <div class="div-7" data-el="div-11">
    <template data-el="div-12">
      <!-- {
  state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'Username: <span style="color: rgba(255,0,0,1);">Error, Try again</span><br/>';
} -->
    </template>
  </div>
</div>
<style>
  .div {
    display: flex;
    max-width: 345px;
    flex-direction: column;
    font-size: 12px;
    font-weight: 400;
    white-space: nowrap;
  }
  .div-2 {
    color: #000;
    font-family: Inter, sans-serif;
    width: 100%;
  }
  .div-3 {
    align-items: start;
    border-radius: 4px;
    border: 1px solid #888;
    display: flex;
    width: 100%;
    flex-direction: column;
    justify-content: center;
    color: #888;
    padding: 10px 60px 10px 10px;
  }
  .div-4 {
    font-family: Inter, sans-serif;
  }
  .div-5 {
    font-family: Inter, sans-serif;
    display: inherit;
  }
  .div-6 {
    font-family: Inter, sans-serif;
    display: inherit;
  }
  .div-7 {
    color: #f00;
    font-family: Inter, sans-serif;
    width: 100%;
    display: inherit;
  }
</style>
<script>
        (() => {
          const state = { stateInput: props.stateInput,};
          let props = {};
          let context = null;
          let nodesToDestroy = [];
          let pendingUpdate = false;


          function destroyAnyNodes() {
            // destroy current view template refs before rendering again
            nodesToDestroy.forEach(el => el.remove());
            nodesToDestroy = [];
          }


          // Function to update data bindings and loops
          // call update() when you mutate state and need the updates to reflect
          // in the dom
          function update() {
            if (pendingUpdate === true) {
              return;
            }
            pendingUpdate = true;

                document.querySelectorAll("[data-el='div-1']").forEach((el) => {


              ;Object.assign(el.style, {
    whiteSpace: state.stateInput === 'Default' ? 'nowrap' : state.stateInput === 'Filling with cursor' ? 'nowrap' : state.stateInput === 'Filled State' ? 'nowrap' : state.stateInput === 'State5' ? 'nowrap' : undefined,
    color: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : '#000'
  });
                });



                document.querySelectorAll("[data-el='div-2']").forEach((el) => {


              ;Object.assign(el.style, {
    color: state.stateInput === 'Default' ? '#000' : state.stateInput === 'Filling with cursor' ? '#000' : state.stateInput === 'Filled State' ? '#000' : state.stateInput === 'State5' ? undefined : undefined,
    fontFamily: state.stateInput === 'Default' ? 'Inter, sans-serif' : state.stateInput === 'Filling with cursor' ? 'Inter, sans-serif' : state.stateInput === 'Filled State' ? 'Inter, sans-serif' : state.stateInput === 'State5' ? 'Inter, sans-serif' : undefined,
    fontStyle: state.stateInput === 'Default' ? 'normal' : state.stateInput === 'Filling with cursor' ? 'normal' : state.stateInput === 'Filled State' ? 'normal' : state.stateInput === 'State5' ? 'normal' : undefined,
    width: state.stateInput === 'Default' ? '100%' : state.stateInput === 'Filling with cursor' ? '100%' : state.stateInput === 'Filled State' ? '100%' : state.stateInput === 'State5' ? '100%' : undefined,
    display: state.stateInput === 'Default' ? 'inherit' : state.stateInput === 'Filling with cursor' ? 'inherit' : state.stateInput === 'Filled State' ? 'inherit' : state.stateInput === 'State5' ? 'inherit' : 'none'
  });
                });



                document.querySelectorAll("[data-el='div-3']").forEach((el) => {


        renderTextNode(el, state.stateInput === 'Default' ? 'Username:<br/>' : state.stateInput === 'Filling with cursor' ? 'Username:<br/>' : state.stateInput === 'Filled State' ? 'Username:<br/>' : state.stateInput === 'State5' ? 'Username:<br/>' : undefined);
                });



                document.querySelectorAll("[data-el='div-4']").forEach((el) => {


              ;Object.assign(el.style, {
    alignItems: state.stateInput === 'Default' ? 'start' : state.stateInput === 'Filling with cursor' ? 'start' : state.stateInput === 'Filled State' ? 'start' : state.stateInput === 'State5' ? undefined : 'start',
    border: state.stateInput === 'Default' ? '1px solid #888' : state.stateInput === 'Filling with cursor' ? '1px solid #2388FF' : state.stateInput === 'Filled State' ? '1px solid #1C1C1C' : state.stateInput === 'State5' ? '1px solid #2388FF' : '1px solid #F00',
    display: state.stateInput === 'Default' ? 'flex' : state.stateInput === 'Filling with cursor' ? 'flex' : state.stateInput === 'Filled State' ? 'flex' : state.stateInput === 'State5' ? 'inherit' : 'flex',
    paddingLeft: state.stateInput === 'Default' ? '10px' : state.stateInput === 'Filling with cursor' ? '10px' : state.stateInput === 'Filled State' ? '10px' : state.stateInput === 'State5' ? undefined : '10px',
    paddingRight: state.stateInput === 'Default' ? '60px' : state.stateInput === 'Filling with cursor' ? '60px' : state.stateInput === 'Filled State' ? '60px' : state.stateInput === 'State5' ? undefined : '60px',
    paddingTop: state.stateInput === 'Default' ? '10px' : state.stateInput === 'Filling with cursor' ? '10px' : state.stateInput === 'Filled State' ? '10px' : state.stateInput === 'State5' ? undefined : '10px',
    paddingBottom: state.stateInput === 'Default' ? '10px' : state.stateInput === 'Filling with cursor' ? '10px' : state.stateInput === 'Filled State' ? '10px' : state.stateInput === 'State5' ? undefined : '10px',
    flexDirection: state.stateInput === 'Default' ? 'column' : state.stateInput === 'Filling with cursor' ? 'column' : state.stateInput === 'Filled State' ? 'column' : state.stateInput === 'State5' ? undefined : 'column',
    justifyContent: state.stateInput === 'Default' ? 'center' : state.stateInput === 'Filling with cursor' ? 'center' : state.stateInput === 'Filled State' ? 'center' : state.stateInput === 'State5' ? undefined : 'center',
    color: state.stateInput === 'Default' ? '#888' : state.stateInput === 'Filling with cursor' ? '#1C1C1C' : state.stateInput === 'Filled State' ? '#1C1C1C' : state.stateInput === 'State5' ? undefined : '#888',
    whiteSpace: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'nowrap',
    minHeight: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : '35px'
  });
                });



                document.querySelectorAll("[data-el='div-5']").forEach((el) => {


              ;Object.assign(el.style, {
    fontFamily: state.stateInput === 'Default' ? 'Inter, sans-serif' : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'Inter, sans-serif',
    fontStyle: state.stateInput === 'Default' ? 'normal' : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'normal',
    display: state.stateInput === 'Default' ? 'inherit' : state.stateInput === 'Filling with cursor' ? 'none' : state.stateInput === 'Filled State' ? 'none' : state.stateInput === 'State5' ? 'none' : 'inherit'
  });
                });



                document.querySelectorAll("[data-el='div-6']").forEach((el) => {


        renderTextNode(el, state.stateInput === 'Default' ? 'Enter Input' : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'Enter Input');
                });



                document.querySelectorAll("[data-el='div-7']").forEach((el) => {


              ;Object.assign(el.style, {
    display: state.stateInput === 'Default' ? 'none' : state.stateInput === 'Filling with cursor' ? 'inherit' : state.stateInput === 'Filled State' ? 'none' : state.stateInput === 'State5' ? 'none' : 'none',
    fontFamily: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? 'Inter, sans-serif' : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : undefined,
    fontStyle: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? 'normal' : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : undefined
  });
                });



                document.querySelectorAll("[data-el='div-8']").forEach((el) => {


        renderTextNode(el, state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? '|' : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : undefined);
                });



                document.querySelectorAll("[data-el='div-9']").forEach((el) => {


              ;Object.assign(el.style, {
    display: state.stateInput === 'Default' ? 'none' : state.stateInput === 'Filling with cursor' ? 'none' : state.stateInput === 'Filled State' ? 'inherit' : state.stateInput === 'State5' ? 'none' : 'none',
    fontFamily: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? 'Inter, sans-serif' : state.stateInput === 'State5' ? undefined : undefined,
    fontStyle: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? 'normal' : state.stateInput === 'State5' ? undefined : undefined
  });
                });



                document.querySelectorAll("[data-el='div-10']").forEach((el) => {


        renderTextNode(el, state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? 'Input Value' : state.stateInput === 'State5' ? undefined : undefined);
                });



                document.querySelectorAll("[data-el='div-11']").forEach((el) => {


              ;Object.assign(el.style, {
    display: state.stateInput === 'Default' ? 'none' : state.stateInput === 'Filling with cursor' ? 'none' : state.stateInput === 'Filled State' ? 'none' : state.stateInput === 'State5' ? 'none' : 'inherit',
    color: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : '#F00',
    fontFamily: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'Inter, sans-serif',
    fontStyle: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'normal',
    width: state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : '100%'
  });
                });



                document.querySelectorAll("[data-el='div-12']").forEach((el) => {


        renderTextNode(el, {
    state.stateInput === 'Default' ? undefined : state.stateInput === 'Filling with cursor' ? undefined : state.stateInput === 'Filled State' ? undefined : state.stateInput === 'State5' ? undefined : 'Username: <span style="color: rgba(255,0,0,1);">Error, Try again</span><br/>';
  });
                });


            destroyAnyNodes();



            pendingUpdate = false;
          }



          // Update with initial state on first load
          update();








            // Helper text DOM nodes
            function renderTextNode(el, text) {
              const textNode = document.createTextNode(text);
              if (el?.scope) {
                textNode.scope = el.scope
              }
              if (el?.context) {
                child.context = el.context;
              }
              el.after(textNode);
              nodesToDestroy.push(el.nextSibling);
            }


        })()
</script>
